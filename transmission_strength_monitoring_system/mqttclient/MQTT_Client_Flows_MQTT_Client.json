[{"id":"f6f2187d.f17ca8","type":"tab","label":"Client","disabled":false,"info":"Client to parse MQTT messages and format them before sending them to database.\n\nFor more detail see [here](https://github.com/mattdear/temperature_transmitter/wiki/Communications#client---node-red)."},{"id":"ed5414ff.2c92a8","type":"influxdb out","z":"f6f2187d.f17ca8","influxdb":"9aa46c68.174d5","name":"send to InfluxDB","measurement":"TransmitterReadings","precision":"","retentionPolicy":"","database":"database","precisionV18FluxV20":"ms","retentionPolicyV18Flux":"","org":"Arqiva","bucket":"TransmitterPower","x":900,"y":300,"wires":[],"info":"The newly created JSON array is then sent to the InfluxDB instance. This instance is running in a parallel Docker container."},{"id":"f6ade4af.236458","type":"mqtt in","z":"f6f2187d.f17ca8","name":"MQTT in","topic":"Arqiva/#","qos":"2","datatype":"json","broker":"ef33bd22.f7a72","x":280,"y":300,"wires":[["789aa44e.4c483c"]],"outputLabels":["JSON"],"info":"All messages are received by subscribing to the top level path `Arqiva/#`. The messages contain JSON objects that must be processed before sending them to the database."},{"id":"8c470244.83e26","type":"function","z":"f6f2187d.f17ca8","name":"reformat JSON","func":"// msg is the JSON object received from the MQTT broker\ndata = msg.payload;\npath = msg.topic.split(\"/\");\nsitename = path[1];\ntransmitterID = path[2];\n\n// The values that will be saved in InfluxDB fields\nfields = data;\n\n// The values stored as tags for this transmitter\ntags = {\"site\" : sitename, \"transmitter\" : transmitterID};\n\noutput = [fields, tags];\n\nmsg.payload = output;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":680,"y":300,"wires":[["1d9400e7.ce37bf","ed5414ff.2c92a8"]],"info":"InfluxDB requires data to be formatted as an array of two JSON objects. The first contains non-indexed data (such as sensor readings), the second contains meta-data to be indexed (such as the site name and transmitter code)."},{"id":"1d9400e7.ce37bf","type":"debug","z":"f6f2187d.f17ca8","name":"debug printing","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":900,"y":360,"wires":[],"info":"Outputs messages to the debug window."},{"id":"789aa44e.4c483c","type":"geohash","z":"f6f2187d.f17ca8","name":"calculate geohash","property":"payload","x":470,"y":300,"wires":[["8c470244.83e26"]],"info":"The latitude and longitude is extracted from the message in and a geohash is calculated. This is automatically added to the JSON message with the key `geohash`. "},{"id":"9aa46c68.174d5","type":"influxdb","hostname":"127.0.0.1","port":"8086","protocol":"http","database":"database","name":"InfluxDB","usetls":false,"tls":"","influxdbVersion":"2.0","url":"http://database:8086","rejectUnauthorized":true},{"id":"ef33bd22.f7a72","type":"mqtt-broker","name":"Broker","broker":"broker","port":"1883","tls":"","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]